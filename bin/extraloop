#! /usr/bin/env ruby
$: << File.realpath(File.dirname(File.dirname(__FILE__))) + "/lib/extraloop"

require 'thor'
require 'thor/group'
require 'redis-storage'

class DataStoreCommand < Thor
  @@sessions = ExtraLoop::Storage::ScrapingSession.all
  @@redis = Ohm.redis

  map "l" => :list

  desc "list [sessions]", "List harvested datasets filtering by session id range (e.g '25..50')"
  def list(sessions=nil)
    sessions = items sessions
    data = sessions.map { |session| [ session.id, session.title, session.model && session.model.name, session.model && session.records.size ]}
    $stdout.puts tabularize(%w[id title model records], data)
  end

  desc "delete [session]", "Remove datasets by session id or range"
  def delete(sessions)
    deleted = 0
    (items sessions).each { |session| (session.delete && session.records.each(&:delete) ) && deleted += 1 }
    $stderr.puts "\n => #{deleted > 0 && deleted or 'No' } record#{'s' if deleted > 1} deleted \n\n" 
    list
  end

  private
  def items(arg=nil)
    if arg
      start_end = /(\d+)\.\.(-?\d+)/.match(arg) ? [$1, $2] : [arg, arg]
      Array(Range.new *start_end).map { |sid| @@sessions[sid] if @@sessions[sid] }.reject(&:nil?)
    else
      @@sessions
    end
  end

  def tabularize(headers, data)
    rows = [headers].concat data.map { |row| row.take(headers.size) }

    max_cell_sizes = Array(Range.new 0, headers.size).map do |coll_index|
      rows.map { |row| row[coll_index].to_s.length }.max
    end

    rows = rows.map do |row|
      " " << row.each_with_index.map { |cell, index| cell.to_s.ljust(max_cell_sizes[index]) }.join(" | ")
    end

    separator = "-" * (rows.map &:size).max
    rows.insert(1, separator).join "\n"
  end
end



class ExtraLoopCommand < Thor
  register(DataStoreCommand, "datastore", "datastore <command>", "CLI interface to the ExtraLoop Redis Datastore")
end

ExtraLoopCommand.start
